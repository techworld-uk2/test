from ftplib import FTP

def upload_file_with_progress(ftp, local_file_path, remote_file_path):
    # Get the file size of the local file
    file_size = os.path.getsize(local_file_path)
    
    # Initialize the uploaded size
    uploaded_size = 0

    # Function to read data and track progress
    def handle_binary(block):
        nonlocal uploaded_size
        uploaded_size += len(block)
        percent_complete = (uploaded_size / file_size) * 100
        print(f'Upload progress: {percent_complete:.2f}%')

    # Open the local file in binary mode and start uploading
    with open(local_file_path, 'rb') as file:
        buffer_size = 8192  # 8 KB buffer size for faster transfers
        ftp.storbinary(f'STOR {remote_file_path}', file, buffer_size, callback=handle_binary)

# Define FTP server details
ftp_server = '192.168.170.58'
ftp_port = 2222  # Replace with your FTP server port
ftp_user = 'android'
ftp_password = 'android'
local_file_path = ''
remote_file_path = ''

# Connect to the FTP server on a specific port
ftp = FTP()
ftp.set_debuglevel(2)  # Set debug level for verbose output
ftp.connect(host=ftp_server, port=ftp_port)
ftp.login(user=ftp_user, passwd=ftp_password)
ftp.set_pasv(True)  # Enable passive mode

# Upload the file with progress tracking
upload_file_with_progress(ftp, local_file_path, remote_file_path)

# Close the connection
ftp.quit()

