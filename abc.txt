import pandas as pd
import requests
from bs4 import BeautifulSoup
import time

# Load the Excel file (make sure to provide the correct path to your Excel file)
file_path = 'components.xlsx'

# Read the Excel file into a DataFrame
df = pd.read_excel(file_path, engine='openpyxl')

# Ensure 'Remarks' column is of type string
if 'Remarks' not in df.columns:
    df['Remarks'] = ""  # Create the column if it doesn't exist

df['Remarks'] = df['Remarks'].astype(str)  # Explicitly convert to string

# Set the API key and base URL
apikey = '4c4f724c3b3fd09d1a293d3cf5209d2b3abef81d'
base_api_url = 'https://api.zenrows.com/v1/'

# Function to get the artifact message from ZenRows API
def get_artifact_message(url):
    try:
        params = {
            'url': url,
            'apikey': apikey,
        }

        response = requests.get(base_api_url, params=params, timeout=10)  # Added timeout

        if response.status_code == 200:
            # Parse the HTML content with BeautifulSoup
            soup = BeautifulSoup(response.text, 'html.parser')

            # Find the div containing the message about the artifact being moved
            div_tag = soup.find('div', style=lambda value: value and 'background-color: #fff8f8' in value)

            if div_tag:
                # Extract the main message
                main_message = div_tag.find('b').text.strip()
                table_tag = div_tag.find('table', class_='grid')
                moved_artifact = table_tag.find('td').text.strip()
                return f'{main_message} {moved_artifact}'
            else:
                return "Could not find the moved artifact information."
        else:
            return f'Error {response.status_code}: {response.text}'

    except requests.exceptions.RequestException as e:
        return f'Connection error: {str(e)}'

# Retry logic parameters
max_retries = 3  # Maximum number of retries
retry_delay = 5  # Delay in seconds before retrying

# Iterate through each row and process the "Components" field
for index, row in df.iterrows():
    # Create the full URL by concatenating the base part with the value from 'Components' column
    component_url = 'https://mvnrepository.com/artifact/' + row['Components']
    
    attempts = 0
    success = False
    
    while attempts < max_retries and not success:
        attempts += 1
        time.sleep(0.5)  # Small delay between requests

        # Get the artifact message using the API
        artifact_message = get_artifact_message(component_url)

        # Check for the specific error code
        if 'Error 422' in artifact_message and '"code":"RESP001"' in artifact_message:
            print(f"Attempt {attempts}: {artifact_message}. Retrying...")
            time.sleep(retry_delay)  # Wait before retrying
        else:
            # Update the 'Remarks' field (or 'Tester Comments' depending on your Excel file)
            df.at[index, 'Remarks'] = artifact_message  # Update this to 'Tester Comments' if needed
            success = True  # Set success to True to exit the retry loop

    # Print the row number, component URL, and artifact message
    print(f"Row {index + 1}: Component URL: {component_url}")
    print(f"Output: {artifact_message}\n")
    
    time.sleep(1.5)  # Additional delay to prevent rate limiting

# Save the updated DataFrame back to the Excel file
df.to_excel(file_path, index=False, engine='openpyxl')

print("Process completed. The 'Remarks' (or 'Tester Comments') field has been updated.")
